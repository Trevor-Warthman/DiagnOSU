{"version":3,"sources":["chat/window/embedded_bot.js","chat/window/ChatWindowHeader.js","chat/window/ChatWindowSidebar.js","chat/window/ChatWindow.js","chat/actions.js","App.js","serviceWorker.js","chat/store.js","chat/reducers.js","index.js"],"names":["window","watsonAssistantChatOptions","integrationID","region","serviceInstanceID","onLoad","instance","render","setTimeout","t","document","createElement","src","head","appendChild","Header","className","ChatWindowSidebar","width","height","children","React","useState","xPosition","setX","useEffect","Fragment","style","transform","minHeight","onClick","ChatWindow","props","chatDialog","createRef","submitMessage","bind","state","sessionId","fetch","headers","Authorization","method","then","response","json","data","setState","session_id","message","this","dispatch","type","content","body","JSON","stringify","input","text","output","generic","forEach","element","href","Component","connect","App","data-testid","Boolean","location","hostname","match","store","createStore","messages","isWaiting","action","response_type","watsonOptions","options","map","option","label","isUser","concat","title","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.4c55fc42.chunk.js","sourcesContent":["\r\nwindow.watsonAssistantChatOptions = {\r\n     integrationID: \"2a6b68d7-2e01-43d4-9455-21c992cdf0b9\", // The ID of this integration.\r\n     region: \"us-south\", // The region your integration is hosted in.\r\n     serviceInstanceID: \"a67e5474-f948-4aba-957a-c6b9547e0150\", // The ID of your service instance.\r\n     onLoad: function(instance) { instance.render(); }\r\n   };\r\n setTimeout(function(){\r\n   const t=document.createElement('script');\r\n   t.src=\"https://web-chat.global.assistant.watson.appdomain.cloud/loadWatsonAssistantChat.js\";\r\n   document.head.appendChild(t);\r\n });\r\n","import React from 'react';\r\nimport \"./ChatWindowHeader.css\";\r\n\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"chat-window-header\">\r\n            <h1>Welcome to the COVID Chat Bot</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n\r\n","import \"./ChatWindowSidebar.css\";\r\nimport React from \"react\";\r\n\r\nexport const ChatWindowSidebar = ({ width, height, children }) => {\r\n    const [xPosition, setX] = React.useState(-width);\r\n  \r\n    const toggleSidebar = () => {\r\n      if (xPosition < 0) {\r\n        setX(0);\r\n      } else {\r\n        setX(-width);\r\n      }\r\n    };\r\n  \r\n    React.useEffect(() => {\r\n      setX(0);\r\n    }, []);\r\n    return (\r\n      <React.Fragment>\r\n        <div\r\n          className=\"chat-window-sidebar\"\r\n          style={{\r\n            transform: `translatex(${xPosition}px)`,\r\n            width: width,\r\n            minHeight: height\r\n          }}\r\n        >\r\n          <button\r\n            onClick={() => toggleSidebar()}\r\n            className=\"toggle-sidebar\"\r\n            style={{\r\n              transform: `translate(${width}px, 20vh)`\r\n            }}\r\n          ></button>\r\n          <div className=\"content\">{children}</div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  export default ChatWindowSidebar;","import React from \"react\";\r\nimport \"./ChatWindow.css\";\r\nimport Header from \"./ChatWindowHeader\";\r\nimport ChatWindowSidebar from \"./ChatWindowSidebar\";\r\nimport { sendUserMessageAction, sendWatsonMessageAction } from \"../actions\";\r\nimport {connect} from \"react-redux\";\r\nimport embedded_bot from \"./embedded_bot\"\r\n\r\nclass ChatWindow extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.chatDialog = React.createRef();\r\n        this.submitMessage = this.submitMessage.bind(this);\r\n\r\n        this.state = {sessionId: ''};\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://api.us-south.assistant.watson.cloud.ibm.com/instances/abadaf22-9195-425a-aa9a-3e86f1cb4a28/v2/assistants/cca390d2-78f4-442c-b2e4-6275fe74ed82/sessions?version=2020-04-01\", {\r\n            headers: {\r\n                Authorization: \"Basic YXBpa2V5OjJWYWo3VVQ1REh6Nkt6Y28xOHUyM2pyRVpFcHJ5Xzc5WGs3R3ozVEYxYnBB\"\r\n            },\r\n            method: \"POST\"\r\n        }).then(response => response.json())\r\n            .then(data => this.setState({sessionId: data.session_id}));\r\n    }\r\n\r\n    submitMessage(message) {\r\n\r\n        this.props.dispatch(sendUserMessageAction(message));\r\n\r\n        fetch(`https://api.us-south.assistant.watson.cloud.ibm.com/instances/abadaf22-9195-425a-aa9a-3e86f1cb4a28/v2/assistants/cca390d2-78f4-442c-b2e4-6275fe74ed82/sessions/${this.state.sessionId}/message?version=2020-04-01`, {\r\n            body: JSON.stringify({\r\n                input: {\r\n                    text: message\r\n                }\r\n            }),\r\n            headers: {\r\n                Authorization: \"Basic YXBpa2V5OjJWYWo3VVQ1REh6Nkt6Y28xOHUyM2pyRVpFcHJ5Xzc5WGs3R3ozVEYxYnBB\",\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            method: \"POST\"\r\n        }).then(response => response.json())\r\n            .then(data => data.output.generic.forEach(element => {\r\n                this.props.dispatch(sendWatsonMessageAction(element));\r\n            }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div> \r\n                <Header />\r\n                <div className=\"main-wrapper\">\r\n                    <ChatWindowSidebar width={300} height={\"100vh\"}>\r\n                        <h1 className=\"side-bar\"> <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/more/index.html\">Center for Disease Control and Prevention: Covid</a> </h1>\r\n                        <h1 className=\"side-bar\"> <a href=\"https://www.nih.gov/coronavirus\">National Institutes of Health: Covid</a> </h1>\r\n                        <h1 className=\"side-bar\"> <a href=\"https://www.columbus.gov/covid19resources/\">City of Columbus Covid Resources</a> </h1>\r\n                    </ChatWindowSidebar>\r\n                    <div className=\"chat-window\">\r\n                        <embedded_bot />\r\n                    </div>\r\n                </div>\r\n            </div>  \r\n        );\r\n    }\r\n}\r\n\r\nexport default connect()(ChatWindow);","export const SEND_USER_MESSAGE = 'SEND_USER_MESSAGE';\r\nexport const SEND_WATSON_MESSAGE = 'SEND_WATSON_MESSAGE';\r\n\r\nexport function sendUserMessageAction(content) {\r\n    return {\r\n        type: SEND_USER_MESSAGE,\r\n        content: content\r\n    }\r\n}\r\n\r\nexport function sendWatsonMessageAction(watsonResponse) {\r\n    return {\r\n        type: SEND_WATSON_MESSAGE,\r\n        content: watsonResponse\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport ChatWindow from \"./chat/window/ChatWindow\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div data-testid=\"app-div\" className=\"App\">\r\n        <ChatWindow />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createStore } from \"redux\";\r\nimport { sendMessageReducer } from \"./reducers\";\r\n\r\nconst store = createStore(sendMessageReducer);\r\n\r\nexport default store;","import { SEND_USER_MESSAGE, SEND_WATSON_MESSAGE } from \"./actions\";\r\n\r\nexport function sendMessageReducer(state={messages: [], isWaiting: false}, action) {\r\n\r\n    switch(action.type) {\r\n        case(SEND_WATSON_MESSAGE): {\r\n            if(action.content.response_type === 'option') {\r\n                const watsonOptions = action.content.options.map(option => {\r\n                    return {\r\n                        content: option.label,\r\n                        isUser: false\r\n                    }\r\n                });\r\n                return {\r\n                    messages: state.messages.concat({content: action.content.title, isUser: false}).concat(watsonOptions),\r\n                    isWaiting: false\r\n                }\r\n            } else {\r\n                return  {\r\n                    messages: [...state.messages, {content: action.content.text, isUser: false}],\r\n                    isWaiting: false\r\n                }\r\n            }\r\n        }\r\n        case(SEND_USER_MESSAGE): return {\r\n            messages: [...state.messages, {content: action.content, isUser: true}],\r\n            isWaiting: true\r\n        }\r\n        default: return {\r\n            ...state\r\n        }\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./chat/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}