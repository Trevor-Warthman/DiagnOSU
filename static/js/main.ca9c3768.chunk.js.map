{"version":3,"sources":["logo.svg","message/Message.js","message/UserMessage.js","message/WatsonMessage.js","ChatDialog.js","ChatInputForm.js","ChatWindow.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Message","props","className","styleClass","content","UserMessage","WatsonMessage","ChatDialog","state","messages","addMessage","bind","createMessageElement","message","isUser","this","setState","prevState","data-testid","map","c","React","Component","ChatInputForm","handleChange","handleSubmit","event","onSubmit","preventDefault","target","value","type","name","onChange","ChatWindow","chatDialog","createRef","submitMessage","count","response","current","ref","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.ca9c3768.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./Message.css\";\n\nexport function Message(props) {\n    return (\n        <div className={props.styleClass + ' message'}>\n            <span>{props.content}</span>\n        </div>\n    );\n}","import {Message} from \"./Message\";\nimport React from \"react\";\nimport \"./UserMessage.css\";\nimport \"./Message.css\";\n\nexport function UserMessage(props) {\n    return (\n        <div className=\"message-line\">\n            <Message styleClass=\"user-message\" content={props.content}/>\n        </div>\n    );\n}","import {Message} from \"./Message\";\nimport React from \"react\";\nimport \"./WatsonMessage.css\";\nimport \"./Message.css\";\n\nexport function WatsonMessage(props) {\n    return (\n        <div className=\"message-line\">\n            <Message styleClass=\"watson-message\" content={props.content}/>\n        </div>\n    );\n}","import React from \"react\";\nimport {UserMessage} from \"./message/UserMessage\";\nimport \"./ChatDialog.css\";\nimport {WatsonMessage} from \"./message/WatsonMessage\";\n\nexport class ChatDialog extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {messages: []};\n        this.addMessage = this.addMessage.bind(this);\n        this.createMessageElement = this.createMessageElement.bind(this);\n    }\n\n    createMessageElement(message) {\n        if(message.isUser) {\n            return (\n                <UserMessage content={message.content}/>\n            );\n        } else {\n            return (\n                <WatsonMessage content={message.content}/>\n            );\n        }\n    }\n\n    addMessage(message) {\n        this.setState(prevState => {\n            return {messages: [...prevState.messages, message]}\n        });\n    }\n\n    render() {\n        return (\n            <div data-testid=\"chat-dialog\" className=\"chat-dialog\">\n                {this.state.messages.map(c => this.createMessageElement(c))}\n            </div>\n        );\n    }\n}","import React from \"react\";\n\nexport class ChatInputForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {message: ''};\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(event) {\n\n        this.props.onSubmit(this.state.message);\n\n        this.setState({message: ''})\n\n        event.preventDefault();\n    }\n\n    handleChange(event) {\n        this.setState({message: event.target.value});\n    }\n\n    render() {\n        return(\n            <form onSubmit={this.handleSubmit}>\n                <input type=\"text\" name=\"input-message\" value={this.state.message} onChange={this.handleChange}/>\n                <button type=\"submit\" name=\"submit\">Enter</button>\n            </form>\n        );\n    }\n}","import React from \"react\";\nimport {ChatDialog} from \"./ChatDialog\";\nimport {ChatInputForm} from \"./ChatInputForm\";\nimport \"./ChatWindow.css\";\n\nexport class ChatWindow extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.chatDialog = React.createRef();\n        this.submitMessage = this.submitMessage.bind(this);\n        this.state = {count: 0};\n    }\n\n    submitMessage(message) {\n\n        let response;\n        switch (this.state.count) {\n            case 0:\n                response = \"What are your symptoms?\";\n                break;\n            case 1:\n                response = \"Have you already taken a covid test?\";\n                break;\n            case 2:\n                response = \"You should get a test ASAP.\";\n                break;\n            default:\n                response = \"Have a nice day\";\n        }\n\n        this.chatDialog.current.addMessage({content: message, isUser: true});\n        // todo Get watson answers with ^^^ input\n        this.chatDialog.current.addMessage({content: response, isUser: false});\n        this.setState({count: this.state.count + 1});\n    }\n\n    render() {\n        return (\n            <div className=\"chat-window\">\n                <ChatDialog ref={this.chatDialog}/>\n                <ChatInputForm onSubmit={this.submitMessage}/>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {ChatWindow} from \"./ChatWindow\";\nfunction App() {\n  return (\n    <div data-testid=\"app-div\" className=\"App\">\n        <ChatWindow/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}