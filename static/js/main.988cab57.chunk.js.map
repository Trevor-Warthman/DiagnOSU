{"version":3,"sources":["message/Message.js","message/UserMessage.js","message/WatsonMessage.js","ChatDialog.js","ChatInputForm.js","ChatWindowHeader.js","ChatWindowSidebar.js","ChatWindow.js","App.js","serviceWorker.js","index.js"],"names":["Message","props","className","styleClass","content","UserMessage","WatsonMessage","ChatDialog","state","messages","addMessage","bind","createMessageElement","message","isUser","this","setState","prevState","map","c","React","Component","ChatInputForm","handleChange","handleSubmit","event","onSubmit","preventDefault","target","value","type","name","onChange","Header","ChatWindowSidebar","width","height","children","useState","xPosition","setX","useEffect","Fragment","style","transform","minHeight","onClick","ChatWindow","chatDialog","createRef","submitMessage","count","response","current","class","href","ref","App","data-testid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.988cab57.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Message.css\";\r\n\r\nexport function Message(props) {\r\n    return (\r\n        <div className={props.styleClass + ' message'}>\r\n            <span>{props.content}</span>\r\n        </div>\r\n    );\r\n}","import {Message} from \"./Message\";\r\nimport React from \"react\";\r\nimport \"./UserMessage.css\";\r\nimport \"./Message.css\";\r\n\r\nexport function UserMessage(props) {\r\n    return (\r\n        <div className=\"message-line\">\r\n            <Message styleClass=\"user-message\" content={props.content}/>\r\n        </div>\r\n    );\r\n}","import {Message} from \"./Message\";\r\nimport React from \"react\";\r\nimport \"./WatsonMessage.css\";\r\nimport \"./Message.css\";\r\n\r\nexport function WatsonMessage(props) {\r\n    return (\r\n        <div className=\"message-line\">\r\n            <Message styleClass=\"watson-message\" content={props.content}/>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport {UserMessage} from \"./message/UserMessage\";\r\nimport \"./ChatDialog.css\";\r\nimport {WatsonMessage} from \"./message/WatsonMessage\";\r\n\r\nexport class ChatDialog extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {messages: []};\r\n        this.addMessage = this.addMessage.bind(this);\r\n        this.createMessageElement = this.createMessageElement.bind(this);\r\n    }\r\n\r\n    createMessageElement(message) {\r\n        if(message.isUser) {\r\n            return (\r\n                <UserMessage content={message.content}/>\r\n            );\r\n        } else {\r\n            return (\r\n                <WatsonMessage content={message.content}/>\r\n            );\r\n        }\r\n    }\r\n\r\n    addMessage(message) {\r\n        this.setState(prevState => {\r\n            return {messages: [...prevState.messages, message]}\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chat-dialog\">\r\n                {this.state.messages.map(c => this.createMessageElement(c))}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\n\r\nexport class ChatInputForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {message: ''};\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(event) {\r\n\r\n        this.props.onSubmit(this.state.message);\r\n\r\n        this.setState({message: ''})\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({message: event.target.value});\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <form onSubmit={this.handleSubmit}>\r\n                <input type=\"text\" name=\"input-message\" value={this.state.message} onChange={this.handleChange}/>\r\n                <button type=\"submit\" name=\"submit\">Enter</button>\r\n            </form>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport \"./ChatWindowHeader.css\";\r\n\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"chat-window-header\">\r\n            <h1>Welcome to the COVID Chat Bot</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n\r\n","import \"./ChatWindowSidebar.css\";\r\nimport React from \"react\";\r\n\r\nexport const ChatWindowSidebar = ({ width, height, children }) => {\r\n    const [xPosition, setX] = React.useState(-width);\r\n  \r\n    const toggleSidebar = () => {\r\n      if (xPosition < 0) {\r\n        setX(0);\r\n      } else {\r\n        setX(-width);\r\n      }\r\n    };\r\n  \r\n    React.useEffect(() => {\r\n      setX(0);\r\n    }, []);\r\n    return (\r\n      <React.Fragment>\r\n        <div\r\n          className=\"chat-window-sidebar\"\r\n          style={{\r\n            transform: `translatex(${xPosition}px)`,\r\n            width: width,\r\n            minHeight: height\r\n          }}\r\n        >\r\n          <button\r\n            onClick={() => toggleSidebar()}\r\n            className=\"toggle-sidebar\"\r\n            style={{\r\n              transform: `translate(${width}px, 20vh)`\r\n            }}\r\n          ></button>\r\n          <div className=\"content\">{children}</div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  export default ChatWindowSidebar;","import React from \"react\";\r\nimport {ChatDialog} from \"./ChatDialog\";\r\nimport {ChatInputForm} from \"./ChatInputForm\";\r\nimport \"./ChatWindow.css\";\r\nimport Header from \"./ChatWindowHeader\";\r\nimport ChatWindowSidebar from \"./ChatWindowSidebar\";\r\n\r\nexport class ChatWindow extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.chatDialog = React.createRef();\r\n        this.submitMessage = this.submitMessage.bind(this);\r\n        this.state = {count: 0};\r\n    }\r\n\r\n    submitMessage(message) {\r\n\r\n        let response;\r\n        switch (this.state.count) {\r\n            case 0:\r\n                response = \"What are your symptoms?\";\r\n                break;\r\n            case 1:\r\n                response = \"Have you already taken a covid test?\";\r\n                break;\r\n            case 2:\r\n                response = \"You should get a test ASAP.\";\r\n                break;\r\n            default:\r\n                response = \"Have a nice day\";\r\n        }\r\n\r\n        this.chatDialog.current.addMessage({content: message, isUser: true});\r\n        // todo Get watson answers with ^^^ input\r\n        this.chatDialog.current.addMessage({content: response, isUser: false});\r\n        this.setState({count: this.state.count + 1});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div> \r\n                <Header />\r\n                <ChatWindowSidebar width ={300} height ={\"100vh\"}>\r\n                    <h1 class=\"side-bar\"> <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/more/index.html\">Center for Disease Control and Prevention: Covid</a> </h1>\r\n                    <h1 class=\"side-bar\"> <a href=\"https://www.nih.gov/coronavirus\">National Institutes of Health: Covid</a> </h1>\r\n                    <h1 class=\"side-bar\"> <a href=\"https://www.columbus.gov/covid19resources/\">City of Columbus Covid Resources</a> </h1>\r\n                </ChatWindowSidebar>\r\n                <div className=\"chat-window\">\r\n                    <ChatDialog ref={this.chatDialog}/>\r\n                    <ChatInputForm onSubmit={this.submitMessage}/>\r\n                </div>\r\n            </div>  \r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {ChatWindow} from \"./ChatWindow\";\r\nfunction App() {\r\n  return (\r\n    <div data-testid=\"app-div\" className=\"App\">\r\n        <ChatWindow/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}