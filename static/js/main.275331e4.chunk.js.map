{"version":3,"sources":["chat/window/embedded_bot.js","chat/window/ChatWindowHeader.js","chat/window/ChatWindowSidebar.js","chat/window/ChatWindow.js","chat/actions.js","App.js","serviceWorker.js","chat/store.js","chat/reducers.js","index.js"],"names":["window","watsonAssistantChatOptions","integrationID","region","serviceInstanceID","onLoad","instance","render","setTimeout","t","document","createElement","src","head","appendChild","Header","className","ChatWindowSidebar","width","height","children","React","useState","xPosition","setX","useEffect","Fragment","style","transform","minHeight","onClick","drBCapabilities","ChatWindow","props","chatDialog","createRef","submitMessage","bind","state","sessionId","fetch","headers","Authorization","method","then","response","json","data","setState","session_id","message","this","dispatch","type","content","body","JSON","stringify","input","text","output","generic","forEach","element","href","url","Component","connect","App","data-testid","Boolean","location","hostname","match","store","createStore","messages","isWaiting","action","response_type","watsonOptions","options","map","option","label","isUser","concat","title","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.275331e4.chunk.js","sourcesContent":["\nwindow.watsonAssistantChatOptions = {\n     integrationID: \"2a6b68d7-2e01-43d4-9455-21c992cdf0b9\", // The ID of this integration.\n     region: \"us-south\", // The region your integration is hosted in.\n     serviceInstanceID: \"a67e5474-f948-4aba-957a-c6b9547e0150\", // The ID of your service instance.\n     onLoad: function(instance) { instance.render(); }\n   };\n setTimeout(function(){\n   const t=document.createElement('script');\n   t.src=\"https://web-chat.global.assistant.watson.appdomain.cloud/loadWatsonAssistantChat.js\";\n   document.head.appendChild(t);\n });\n","import React from 'react';\nimport \"./ChatWindowHeader.css\";\n\n\nfunction Header() {\n    return (\n        <div className=\"chat-window-header\">\n            <h1>Welcome to the COVID Chat Bot</h1>\n        </div>\n    )\n}\n\nexport default Header\n\n","import \"./ChatWindowSidebar.css\";\nimport React from \"react\";\n\nexport const ChatWindowSidebar = ({ width, height, children }) => {\n    const [xPosition, setX] = React.useState(-width);\n  \n    const toggleSidebar = () => {\n      if (xPosition < 0) {\n        setX(0);\n      } else {\n        setX(-width);\n      }\n    };\n  \n    React.useEffect(() => {\n      setX(0);\n    }, []);\n    return (\n      <React.Fragment>\n        <div\n          className=\"chat-window-sidebar\"\n          style={{\n            transform: `translatex(${xPosition}px)`,\n            width: width,\n            minHeight: height\n          }}\n        >\n          <button\n            onClick={() => toggleSidebar()}\n            className=\"toggle-sidebar\"\n            style={{\n              transform: `translate(${width}px, 20vh)`\n            }}\n          ></button>\n          <div className=\"content\">{children}</div>\n        </div>\n      </React.Fragment>\n    );\n  };\n\n  export default ChatWindowSidebar;","import React from \"react\";\nimport \"./ChatWindow.css\";\nimport Header from \"./ChatWindowHeader\";\nimport ChatWindowSidebar from \"./ChatWindowSidebar\";\nimport { sendUserMessageAction, sendWatsonMessageAction } from \"../actions\";\nimport {connect} from \"react-redux\";\nimport ReactPlayer from \"react-player\"\nimport embedded_bot from \"./embedded_bot\"\n\nvar drBCapabilities = [\"Help you determine if you need a test for COVID-19\",\"Give you more information about COVID-19\",\"Inform you on symptoms of COVID-19, the flu, and the common cold\",\"Talk about the buckeyes\"]\n\nclass ChatWindow extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.chatDialog = React.createRef();\n        this.submitMessage = this.submitMessage.bind(this);\n\n        this.state = {sessionId: ''};\n    }\n\n    componentDidMount() {\n        fetch(\"https://api.us-south.assistant.watson.cloud.ibm.com/instances/abadaf22-9195-425a-aa9a-3e86f1cb4a28/v2/assistants/cca390d2-78f4-442c-b2e4-6275fe74ed82/sessions?version=2020-04-01\", {\n            headers: {\n                Authorization: \"Basic YXBpa2V5OjJWYWo3VVQ1REh6Nkt6Y28xOHUyM2pyRVpFcHJ5Xzc5WGs3R3ozVEYxYnBB\"\n            },\n            method: \"POST\"\n        }).then(response => response.json())\n            .then(data => this.setState({sessionId: data.session_id}));\n    }\n\n    submitMessage(message) {\n\n        this.props.dispatch(sendUserMessageAction(message));\n\n        fetch(`https://api.us-south.assistant.watson.cloud.ibm.com/instances/abadaf22-9195-425a-aa9a-3e86f1cb4a28/v2/assistants/cca390d2-78f4-442c-b2e4-6275fe74ed82/sessions/${this.state.sessionId}/message?version=2020-04-01`, {\n            body: JSON.stringify({\n                input: {\n                    text: message\n                }\n            }),\n            headers: {\n                Authorization: \"Basic YXBpa2V5OjJWYWo3VVQ1REh6Nkt6Y28xOHUyM2pyRVpFcHJ5Xzc5WGs3R3ozVEYxYnBB\",\n                \"Content-Type\": \"application/json\"\n            },\n            method: \"POST\"\n        }).then(response => response.json())\n            .then(data => data.output.generic.forEach(element => {\n                this.props.dispatch(sendWatsonMessageAction(element));\n            }));\n    }\n\n    render() {\n        return (\n            <div> \n                <Header />\n                <div className=\"main-wrapper\">\n                    <ChatWindowSidebar width={300} height={\"100vh\"}>\n                        <h1 className=\"side-bar\"> <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/more/index.html\">Center for Disease Control and Prevention: Covid</a> </h1>\n                        <h1 className=\"side-bar\"> <a href=\"https://www.nih.gov/coronavirus\">National Institutes of Health: Covid</a> </h1>\n                        <h1 className=\"side-bar\"> <a href=\"https://www.columbus.gov/covid19resources/\">City of Columbus Covid Resources</a> </h1>\n                    </ChatWindowSidebar>\n                    <div className=\"youtube\">\n                        <ReactPlayer url=\"https://www.youtube.com/watch?v=DCdxsnRF1Fk&ab_channel=UpToDate\"/>\n                    </div>\n                    <div className=\"Capabilities\">\n                        <h3>{\"Dr. Brutus Can:\"}</h3>\n                        <ul> \n                            <li>{drBCapabilities[0]}</li>\n                            <li>{drBCapabilities[1]}</li>\n                            <li>{drBCapabilities[2]}</li>\n                            <li>{drBCapabilities[3]}</li>\n                        </ul>\n                    </div>\n                    <div className=\"chat-window\">\n                        <embedded_bot />\n                    </div>\n                </div>\n            </div>  \n        );\n    }\n}\n\nexport default connect()(ChatWindow);\n","export const SEND_USER_MESSAGE = 'SEND_USER_MESSAGE';\nexport const SEND_WATSON_MESSAGE = 'SEND_WATSON_MESSAGE';\n\nexport function sendUserMessageAction(content) {\n    return {\n        type: SEND_USER_MESSAGE,\n        content: content\n    }\n}\n\nexport function sendWatsonMessageAction(watsonResponse) {\n    return {\n        type: SEND_WATSON_MESSAGE,\n        content: watsonResponse\n    }\n}","import React from 'react';\nimport './App.css';\nimport ChatWindow from \"./chat/window/ChatWindow\";\n\nfunction App() {\n  return (\n    <div data-testid=\"app-div\" className=\"App\">\n        <ChatWindow />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore } from \"redux\";\nimport { sendMessageReducer } from \"./reducers\";\n\nconst store = createStore(sendMessageReducer);\n\nexport default store;","import { SEND_USER_MESSAGE, SEND_WATSON_MESSAGE } from \"./actions\";\n\nexport function sendMessageReducer(state={messages: [], isWaiting: false}, action) {\n\n    switch(action.type) {\n        case(SEND_WATSON_MESSAGE): {\n            if(action.content.response_type === 'option') {\n                const watsonOptions = action.content.options.map(option => {\n                    return {\n                        content: option.label,\n                        isUser: false\n                    }\n                });\n                return {\n                    messages: state.messages.concat({content: action.content.title, isUser: false}).concat(watsonOptions),\n                    isWaiting: false\n                }\n            } else {\n                return  {\n                    messages: [...state.messages, {content: action.content.text, isUser: false}],\n                    isWaiting: false\n                }\n            }\n        }\n        case(SEND_USER_MESSAGE): return {\n            messages: [...state.messages, {content: action.content, isUser: true}],\n            isWaiting: true\n        }\n        default: return {\n            ...state\n        }\n    }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport store from \"./chat/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}